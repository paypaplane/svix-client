<?php
/**
 * MessageAttemptApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Svix\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Svix API
 *
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`. For more information on authentication, please refer to the [authentication token docs](https://docs.svix.com/api-keys).  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.
 *
 * The version of the OpenAPI document: 1.13.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Svix\ApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Svix\ApiClient\ApiException;
use Svix\ApiClient\Configuration;
use Svix\ApiClient\HeaderSelector;
use Svix\ApiClient\ObjectSerializer;

/**
 * MessageAttemptApi Class Doc Comment
 *
 * @category Class
 * @package  Svix\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MessageAttemptApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'v1MessageAttemptExpungeContent' => [
            'application/json',
        ],
        'v1MessageAttemptGet' => [
            'application/json',
        ],
        'v1MessageAttemptListAttemptedDestinations' => [
            'application/json',
        ],
        'v1MessageAttemptListAttemptedMessages' => [
            'application/json',
        ],
        'v1MessageAttemptListByEndpoint' => [
            'application/json',
        ],
        'v1MessageAttemptListByEndpointDeprecated' => [
            'application/json',
        ],
        'v1MessageAttemptListByMsg' => [
            'application/json',
        ],
        'v1MessageAttemptListByMsgDeprecated' => [
            'application/json',
        ],
        'v1MessageAttemptResend' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1MessageAttemptExpungeContent
     *
     * Delete attempt response body
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  string $attempt_id The attempt&#39;s ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptExpungeContent'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1MessageAttemptExpungeContent($app_id, $msg_id, $attempt_id, string $contentType = self::contentTypes['v1MessageAttemptExpungeContent'][0])
    {
        $this->v1MessageAttemptExpungeContentWithHttpInfo($app_id, $msg_id, $attempt_id, $contentType);
    }

    /**
     * Operation v1MessageAttemptExpungeContentWithHttpInfo
     *
     * Delete attempt response body
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  string $attempt_id The attempt&#39;s ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptExpungeContent'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MessageAttemptExpungeContentWithHttpInfo($app_id, $msg_id, $attempt_id, string $contentType = self::contentTypes['v1MessageAttemptExpungeContent'][0])
    {
        $request = $this->v1MessageAttemptExpungeContentRequest($app_id, $msg_id, $attempt_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MessageAttemptExpungeContentAsync
     *
     * Delete attempt response body
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  string $attempt_id The attempt&#39;s ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptExpungeContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessageAttemptExpungeContentAsync($app_id, $msg_id, $attempt_id, string $contentType = self::contentTypes['v1MessageAttemptExpungeContent'][0])
    {
        return $this->v1MessageAttemptExpungeContentAsyncWithHttpInfo($app_id, $msg_id, $attempt_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MessageAttemptExpungeContentAsyncWithHttpInfo
     *
     * Delete attempt response body
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  string $attempt_id The attempt&#39;s ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptExpungeContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessageAttemptExpungeContentAsyncWithHttpInfo($app_id, $msg_id, $attempt_id, string $contentType = self::contentTypes['v1MessageAttemptExpungeContent'][0])
    {
        $returnType = '';
        $request = $this->v1MessageAttemptExpungeContentRequest($app_id, $msg_id, $attempt_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MessageAttemptExpungeContent'
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  string $attempt_id The attempt&#39;s ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptExpungeContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MessageAttemptExpungeContentRequest($app_id, $msg_id, $attempt_id, string $contentType = self::contentTypes['v1MessageAttemptExpungeContent'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling v1MessageAttemptExpungeContent'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.v1MessageAttemptExpungeContent, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.v1MessageAttemptExpungeContent, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling MessageAttemptApi.v1MessageAttemptExpungeContent, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'msg_id' is set
        if ($msg_id === null || (is_array($msg_id) && count($msg_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $msg_id when calling v1MessageAttemptExpungeContent'
            );
        }
        if (strlen($msg_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.v1MessageAttemptExpungeContent, must be smaller than or equal to 256.');
        }
        if (strlen($msg_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.v1MessageAttemptExpungeContent, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $msg_id)) {
            throw new \InvalidArgumentException("invalid value for \"msg_id\" when calling MessageAttemptApi.v1MessageAttemptExpungeContent, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'attempt_id' is set
        if ($attempt_id === null || (is_array($attempt_id) && count($attempt_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attempt_id when calling v1MessageAttemptExpungeContent'
            );
        }


        $resourcePath = '/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/content/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($msg_id !== null) {
            $resourcePath = str_replace(
                '{' . 'msg_id' . '}',
                ObjectSerializer::toPathValue($msg_id),
                $resourcePath
            );
        }
        // path params
        if ($attempt_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attempt_id' . '}',
                ObjectSerializer::toPathValue($attempt_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MessageAttemptGet
     *
     * Get Attempt
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  string $attempt_id The attempt&#39;s ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptGet'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\ApiClient\Model\MessageAttemptOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut
     */
    public function v1MessageAttemptGet($app_id, $msg_id, $attempt_id, string $contentType = self::contentTypes['v1MessageAttemptGet'][0])
    {
        list($response) = $this->v1MessageAttemptGetWithHttpInfo($app_id, $msg_id, $attempt_id, $contentType);
        return $response;
    }

    /**
     * Operation v1MessageAttemptGetWithHttpInfo
     *
     * Get Attempt
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  string $attempt_id The attempt&#39;s ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptGet'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\ApiClient\Model\MessageAttemptOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MessageAttemptGetWithHttpInfo($app_id, $msg_id, $attempt_id, string $contentType = self::contentTypes['v1MessageAttemptGet'][0])
    {
        $request = $this->v1MessageAttemptGetRequest($app_id, $msg_id, $attempt_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Svix\ApiClient\Model\MessageAttemptOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\MessageAttemptOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\MessageAttemptOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\ApiClient\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\ApiClient\Model\MessageAttemptOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\MessageAttemptOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MessageAttemptGetAsync
     *
     * Get Attempt
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  string $attempt_id The attempt&#39;s ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessageAttemptGetAsync($app_id, $msg_id, $attempt_id, string $contentType = self::contentTypes['v1MessageAttemptGet'][0])
    {
        return $this->v1MessageAttemptGetAsyncWithHttpInfo($app_id, $msg_id, $attempt_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MessageAttemptGetAsyncWithHttpInfo
     *
     * Get Attempt
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  string $attempt_id The attempt&#39;s ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessageAttemptGetAsyncWithHttpInfo($app_id, $msg_id, $attempt_id, string $contentType = self::contentTypes['v1MessageAttemptGet'][0])
    {
        $returnType = '\Svix\ApiClient\Model\MessageAttemptOut';
        $request = $this->v1MessageAttemptGetRequest($app_id, $msg_id, $attempt_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MessageAttemptGet'
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  string $attempt_id The attempt&#39;s ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MessageAttemptGetRequest($app_id, $msg_id, $attempt_id, string $contentType = self::contentTypes['v1MessageAttemptGet'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling v1MessageAttemptGet'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.v1MessageAttemptGet, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.v1MessageAttemptGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling MessageAttemptApi.v1MessageAttemptGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'msg_id' is set
        if ($msg_id === null || (is_array($msg_id) && count($msg_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $msg_id when calling v1MessageAttemptGet'
            );
        }
        if (strlen($msg_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.v1MessageAttemptGet, must be smaller than or equal to 256.');
        }
        if (strlen($msg_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.v1MessageAttemptGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $msg_id)) {
            throw new \InvalidArgumentException("invalid value for \"msg_id\" when calling MessageAttemptApi.v1MessageAttemptGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'attempt_id' is set
        if ($attempt_id === null || (is_array($attempt_id) && count($attempt_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attempt_id when calling v1MessageAttemptGet'
            );
        }


        $resourcePath = '/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($msg_id !== null) {
            $resourcePath = str_replace(
                '{' . 'msg_id' . '}',
                ObjectSerializer::toPathValue($msg_id),
                $resourcePath
            );
        }
        // path params
        if ($attempt_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attempt_id' . '}',
                ObjectSerializer::toPathValue($attempt_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MessageAttemptListAttemptedDestinations
     *
     * List Attempted Destinations
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListAttemptedDestinations'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\ApiClient\Model\ListResponseMessageEndpointOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut
     */
    public function v1MessageAttemptListAttemptedDestinations($app_id, $msg_id, $limit = null, $iterator = null, string $contentType = self::contentTypes['v1MessageAttemptListAttemptedDestinations'][0])
    {
        list($response) = $this->v1MessageAttemptListAttemptedDestinationsWithHttpInfo($app_id, $msg_id, $limit, $iterator, $contentType);
        return $response;
    }

    /**
     * Operation v1MessageAttemptListAttemptedDestinationsWithHttpInfo
     *
     * List Attempted Destinations
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListAttemptedDestinations'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\ApiClient\Model\ListResponseMessageEndpointOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MessageAttemptListAttemptedDestinationsWithHttpInfo($app_id, $msg_id, $limit = null, $iterator = null, string $contentType = self::contentTypes['v1MessageAttemptListAttemptedDestinations'][0])
    {
        $request = $this->v1MessageAttemptListAttemptedDestinationsRequest($app_id, $msg_id, $limit, $iterator, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Svix\ApiClient\Model\ListResponseMessageEndpointOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\ListResponseMessageEndpointOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\ListResponseMessageEndpointOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\ApiClient\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\ApiClient\Model\ListResponseMessageEndpointOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\ListResponseMessageEndpointOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MessageAttemptListAttemptedDestinationsAsync
     *
     * List Attempted Destinations
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListAttemptedDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessageAttemptListAttemptedDestinationsAsync($app_id, $msg_id, $limit = null, $iterator = null, string $contentType = self::contentTypes['v1MessageAttemptListAttemptedDestinations'][0])
    {
        return $this->v1MessageAttemptListAttemptedDestinationsAsyncWithHttpInfo($app_id, $msg_id, $limit, $iterator, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MessageAttemptListAttemptedDestinationsAsyncWithHttpInfo
     *
     * List Attempted Destinations
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListAttemptedDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessageAttemptListAttemptedDestinationsAsyncWithHttpInfo($app_id, $msg_id, $limit = null, $iterator = null, string $contentType = self::contentTypes['v1MessageAttemptListAttemptedDestinations'][0])
    {
        $returnType = '\Svix\ApiClient\Model\ListResponseMessageEndpointOut';
        $request = $this->v1MessageAttemptListAttemptedDestinationsRequest($app_id, $msg_id, $limit, $iterator, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MessageAttemptListAttemptedDestinations'
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListAttemptedDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MessageAttemptListAttemptedDestinationsRequest($app_id, $msg_id, $limit = null, $iterator = null, string $contentType = self::contentTypes['v1MessageAttemptListAttemptedDestinations'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling v1MessageAttemptListAttemptedDestinations'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.v1MessageAttemptListAttemptedDestinations, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.v1MessageAttemptListAttemptedDestinations, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling MessageAttemptApi.v1MessageAttemptListAttemptedDestinations, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'msg_id' is set
        if ($msg_id === null || (is_array($msg_id) && count($msg_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $msg_id when calling v1MessageAttemptListAttemptedDestinations'
            );
        }
        if (strlen($msg_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.v1MessageAttemptListAttemptedDestinations, must be smaller than or equal to 256.');
        }
        if (strlen($msg_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.v1MessageAttemptListAttemptedDestinations, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $msg_id)) {
            throw new \InvalidArgumentException("invalid value for \"msg_id\" when calling MessageAttemptApi.v1MessageAttemptListAttemptedDestinations, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        if ($limit !== null && $limit > 250) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageAttemptApi.v1MessageAttemptListAttemptedDestinations, must be smaller than or equal to 250.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageAttemptApi.v1MessageAttemptListAttemptedDestinations, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/api/v1/app/{app_id}/msg/{msg_id}/endpoint/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iterator,
            'iterator', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($msg_id !== null) {
            $resourcePath = str_replace(
                '{' . 'msg_id' . '}',
                ObjectSerializer::toPathValue($msg_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MessageAttemptListAttemptedMessages
     *
     * List Attempted Messages
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $endpoint_id The ep&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  bool $with_content When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListAttemptedMessages'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\ApiClient\Model\ListResponseEndpointMessageOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut
     */
    public function v1MessageAttemptListAttemptedMessages($app_id, $endpoint_id, $limit = null, $iterator = null, $channel = null, $status = null, $before = null, $after = null, $with_content = true, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListAttemptedMessages'][0])
    {
        list($response) = $this->v1MessageAttemptListAttemptedMessagesWithHttpInfo($app_id, $endpoint_id, $limit, $iterator, $channel, $status, $before, $after, $with_content, $event_types, $contentType);
        return $response;
    }

    /**
     * Operation v1MessageAttemptListAttemptedMessagesWithHttpInfo
     *
     * List Attempted Messages
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $endpoint_id The ep&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  bool $with_content When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListAttemptedMessages'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\ApiClient\Model\ListResponseEndpointMessageOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MessageAttemptListAttemptedMessagesWithHttpInfo($app_id, $endpoint_id, $limit = null, $iterator = null, $channel = null, $status = null, $before = null, $after = null, $with_content = true, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListAttemptedMessages'][0])
    {
        $request = $this->v1MessageAttemptListAttemptedMessagesRequest($app_id, $endpoint_id, $limit, $iterator, $channel, $status, $before, $after, $with_content, $event_types, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Svix\ApiClient\Model\ListResponseEndpointMessageOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\ListResponseEndpointMessageOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\ListResponseEndpointMessageOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\ApiClient\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\ApiClient\Model\ListResponseEndpointMessageOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\ListResponseEndpointMessageOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MessageAttemptListAttemptedMessagesAsync
     *
     * List Attempted Messages
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $endpoint_id The ep&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  bool $with_content When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListAttemptedMessages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessageAttemptListAttemptedMessagesAsync($app_id, $endpoint_id, $limit = null, $iterator = null, $channel = null, $status = null, $before = null, $after = null, $with_content = true, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListAttemptedMessages'][0])
    {
        return $this->v1MessageAttemptListAttemptedMessagesAsyncWithHttpInfo($app_id, $endpoint_id, $limit, $iterator, $channel, $status, $before, $after, $with_content, $event_types, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MessageAttemptListAttemptedMessagesAsyncWithHttpInfo
     *
     * List Attempted Messages
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $endpoint_id The ep&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  bool $with_content When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListAttemptedMessages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessageAttemptListAttemptedMessagesAsyncWithHttpInfo($app_id, $endpoint_id, $limit = null, $iterator = null, $channel = null, $status = null, $before = null, $after = null, $with_content = true, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListAttemptedMessages'][0])
    {
        $returnType = '\Svix\ApiClient\Model\ListResponseEndpointMessageOut';
        $request = $this->v1MessageAttemptListAttemptedMessagesRequest($app_id, $endpoint_id, $limit, $iterator, $channel, $status, $before, $after, $with_content, $event_types, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MessageAttemptListAttemptedMessages'
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $endpoint_id The ep&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  bool $with_content When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListAttemptedMessages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MessageAttemptListAttemptedMessagesRequest($app_id, $endpoint_id, $limit = null, $iterator = null, $channel = null, $status = null, $before = null, $after = null, $with_content = true, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListAttemptedMessages'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling v1MessageAttemptListAttemptedMessages'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.v1MessageAttemptListAttemptedMessages, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.v1MessageAttemptListAttemptedMessages, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling MessageAttemptApi.v1MessageAttemptListAttemptedMessages, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling v1MessageAttemptListAttemptedMessages'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.v1MessageAttemptListAttemptedMessages, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.v1MessageAttemptListAttemptedMessages, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling MessageAttemptApi.v1MessageAttemptListAttemptedMessages, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        if ($limit !== null && $limit > 250) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageAttemptApi.v1MessageAttemptListAttemptedMessages, must be smaller than or equal to 250.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageAttemptApi.v1MessageAttemptListAttemptedMessages, must be bigger than or equal to 1.');
        }
        

        if ($channel !== null && strlen($channel) > 128) {
            throw new \InvalidArgumentException('invalid length for "$channel" when calling MessageAttemptApi.v1MessageAttemptListAttemptedMessages, must be smaller than or equal to 128.');
        }
        if ($channel !== null && !preg_match("/^[a-zA-Z0-9\\-_.]+$/", $channel)) {
            throw new \InvalidArgumentException("invalid value for \"channel\" when calling MessageAttemptApi.v1MessageAttemptListAttemptedMessages, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        






        $resourcePath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iterator,
            'iterator', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel,
            'channel', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'MessageStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before,
            'before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_content,
            'with_content', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $event_types,
            'event_types', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MessageAttemptListByEndpoint
     *
     * List Attempts By Endpoint
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $endpoint_id The ep&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  StatusCodeClass $status_code_class Filter response based on the HTTP status code (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  bool $with_content When &#x60;true&#x60; attempt content is included in the response (optional, default to true)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListByEndpoint'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\ApiClient\Model\ListResponseMessageAttemptOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut
     */
    public function v1MessageAttemptListByEndpoint($app_id, $endpoint_id, $limit = null, $iterator = null, $status = null, $status_code_class = null, $channel = null, $before = null, $after = null, $with_content = true, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListByEndpoint'][0])
    {
        list($response) = $this->v1MessageAttemptListByEndpointWithHttpInfo($app_id, $endpoint_id, $limit, $iterator, $status, $status_code_class, $channel, $before, $after, $with_content, $event_types, $contentType);
        return $response;
    }

    /**
     * Operation v1MessageAttemptListByEndpointWithHttpInfo
     *
     * List Attempts By Endpoint
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $endpoint_id The ep&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  StatusCodeClass $status_code_class Filter response based on the HTTP status code (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  bool $with_content When &#x60;true&#x60; attempt content is included in the response (optional, default to true)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListByEndpoint'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\ApiClient\Model\ListResponseMessageAttemptOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MessageAttemptListByEndpointWithHttpInfo($app_id, $endpoint_id, $limit = null, $iterator = null, $status = null, $status_code_class = null, $channel = null, $before = null, $after = null, $with_content = true, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListByEndpoint'][0])
    {
        $request = $this->v1MessageAttemptListByEndpointRequest($app_id, $endpoint_id, $limit, $iterator, $status, $status_code_class, $channel, $before, $after, $with_content, $event_types, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Svix\ApiClient\Model\ListResponseMessageAttemptOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\ListResponseMessageAttemptOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\ListResponseMessageAttemptOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\ApiClient\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\ApiClient\Model\ListResponseMessageAttemptOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\ListResponseMessageAttemptOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MessageAttemptListByEndpointAsync
     *
     * List Attempts By Endpoint
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $endpoint_id The ep&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  StatusCodeClass $status_code_class Filter response based on the HTTP status code (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  bool $with_content When &#x60;true&#x60; attempt content is included in the response (optional, default to true)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListByEndpoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessageAttemptListByEndpointAsync($app_id, $endpoint_id, $limit = null, $iterator = null, $status = null, $status_code_class = null, $channel = null, $before = null, $after = null, $with_content = true, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListByEndpoint'][0])
    {
        return $this->v1MessageAttemptListByEndpointAsyncWithHttpInfo($app_id, $endpoint_id, $limit, $iterator, $status, $status_code_class, $channel, $before, $after, $with_content, $event_types, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MessageAttemptListByEndpointAsyncWithHttpInfo
     *
     * List Attempts By Endpoint
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $endpoint_id The ep&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  StatusCodeClass $status_code_class Filter response based on the HTTP status code (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  bool $with_content When &#x60;true&#x60; attempt content is included in the response (optional, default to true)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListByEndpoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessageAttemptListByEndpointAsyncWithHttpInfo($app_id, $endpoint_id, $limit = null, $iterator = null, $status = null, $status_code_class = null, $channel = null, $before = null, $after = null, $with_content = true, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListByEndpoint'][0])
    {
        $returnType = '\Svix\ApiClient\Model\ListResponseMessageAttemptOut';
        $request = $this->v1MessageAttemptListByEndpointRequest($app_id, $endpoint_id, $limit, $iterator, $status, $status_code_class, $channel, $before, $after, $with_content, $event_types, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MessageAttemptListByEndpoint'
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $endpoint_id The ep&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  StatusCodeClass $status_code_class Filter response based on the HTTP status code (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  bool $with_content When &#x60;true&#x60; attempt content is included in the response (optional, default to true)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListByEndpoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MessageAttemptListByEndpointRequest($app_id, $endpoint_id, $limit = null, $iterator = null, $status = null, $status_code_class = null, $channel = null, $before = null, $after = null, $with_content = true, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListByEndpoint'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling v1MessageAttemptListByEndpoint'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.v1MessageAttemptListByEndpoint, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.v1MessageAttemptListByEndpoint, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling MessageAttemptApi.v1MessageAttemptListByEndpoint, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling v1MessageAttemptListByEndpoint'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.v1MessageAttemptListByEndpoint, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.v1MessageAttemptListByEndpoint, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling MessageAttemptApi.v1MessageAttemptListByEndpoint, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        if ($limit !== null && $limit > 250) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageAttemptApi.v1MessageAttemptListByEndpoint, must be smaller than or equal to 250.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageAttemptApi.v1MessageAttemptListByEndpoint, must be bigger than or equal to 1.');
        }
        



        if ($channel !== null && strlen($channel) > 128) {
            throw new \InvalidArgumentException('invalid length for "$channel" when calling MessageAttemptApi.v1MessageAttemptListByEndpoint, must be smaller than or equal to 128.');
        }
        if ($channel !== null && !preg_match("/^[a-zA-Z0-9\\-_.]+$/", $channel)) {
            throw new \InvalidArgumentException("invalid value for \"channel\" when calling MessageAttemptApi.v1MessageAttemptListByEndpoint, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        





        $resourcePath = '/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iterator,
            'iterator', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'MessageStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status_code_class,
            'status_code_class', // param base name
            'StatusCodeClass', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel,
            'channel', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before,
            'before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_content,
            'with_content', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $event_types,
            'event_types', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MessageAttemptListByEndpointDeprecated
     *
     * List Attempts For Endpoint
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  string $endpoint_id The ep&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListByEndpointDeprecated'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\ApiClient\Model\ListResponseMessageAttemptEndpointOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut
     * @deprecated
     */
    public function v1MessageAttemptListByEndpointDeprecated($app_id, $msg_id, $endpoint_id, $limit = null, $iterator = null, $channel = null, $status = null, $before = null, $after = null, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListByEndpointDeprecated'][0])
    {
        list($response) = $this->v1MessageAttemptListByEndpointDeprecatedWithHttpInfo($app_id, $msg_id, $endpoint_id, $limit, $iterator, $channel, $status, $before, $after, $event_types, $contentType);
        return $response;
    }

    /**
     * Operation v1MessageAttemptListByEndpointDeprecatedWithHttpInfo
     *
     * List Attempts For Endpoint
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  string $endpoint_id The ep&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListByEndpointDeprecated'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\ApiClient\Model\ListResponseMessageAttemptEndpointOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function v1MessageAttemptListByEndpointDeprecatedWithHttpInfo($app_id, $msg_id, $endpoint_id, $limit = null, $iterator = null, $channel = null, $status = null, $before = null, $after = null, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListByEndpointDeprecated'][0])
    {
        $request = $this->v1MessageAttemptListByEndpointDeprecatedRequest($app_id, $msg_id, $endpoint_id, $limit, $iterator, $channel, $status, $before, $after, $event_types, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Svix\ApiClient\Model\ListResponseMessageAttemptEndpointOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\ListResponseMessageAttemptEndpointOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\ListResponseMessageAttemptEndpointOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\ApiClient\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\ApiClient\Model\ListResponseMessageAttemptEndpointOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\ListResponseMessageAttemptEndpointOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MessageAttemptListByEndpointDeprecatedAsync
     *
     * List Attempts For Endpoint
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  string $endpoint_id The ep&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListByEndpointDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function v1MessageAttemptListByEndpointDeprecatedAsync($app_id, $msg_id, $endpoint_id, $limit = null, $iterator = null, $channel = null, $status = null, $before = null, $after = null, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListByEndpointDeprecated'][0])
    {
        return $this->v1MessageAttemptListByEndpointDeprecatedAsyncWithHttpInfo($app_id, $msg_id, $endpoint_id, $limit, $iterator, $channel, $status, $before, $after, $event_types, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MessageAttemptListByEndpointDeprecatedAsyncWithHttpInfo
     *
     * List Attempts For Endpoint
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  string $endpoint_id The ep&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListByEndpointDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function v1MessageAttemptListByEndpointDeprecatedAsyncWithHttpInfo($app_id, $msg_id, $endpoint_id, $limit = null, $iterator = null, $channel = null, $status = null, $before = null, $after = null, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListByEndpointDeprecated'][0])
    {
        $returnType = '\Svix\ApiClient\Model\ListResponseMessageAttemptEndpointOut';
        $request = $this->v1MessageAttemptListByEndpointDeprecatedRequest($app_id, $msg_id, $endpoint_id, $limit, $iterator, $channel, $status, $before, $after, $event_types, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MessageAttemptListByEndpointDeprecated'
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  string $endpoint_id The ep&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListByEndpointDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function v1MessageAttemptListByEndpointDeprecatedRequest($app_id, $msg_id, $endpoint_id, $limit = null, $iterator = null, $channel = null, $status = null, $before = null, $after = null, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListByEndpointDeprecated'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling v1MessageAttemptListByEndpointDeprecated'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.v1MessageAttemptListByEndpointDeprecated, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.v1MessageAttemptListByEndpointDeprecated, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling MessageAttemptApi.v1MessageAttemptListByEndpointDeprecated, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'msg_id' is set
        if ($msg_id === null || (is_array($msg_id) && count($msg_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $msg_id when calling v1MessageAttemptListByEndpointDeprecated'
            );
        }
        if (strlen($msg_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.v1MessageAttemptListByEndpointDeprecated, must be smaller than or equal to 256.');
        }
        if (strlen($msg_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.v1MessageAttemptListByEndpointDeprecated, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $msg_id)) {
            throw new \InvalidArgumentException("invalid value for \"msg_id\" when calling MessageAttemptApi.v1MessageAttemptListByEndpointDeprecated, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling v1MessageAttemptListByEndpointDeprecated'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.v1MessageAttemptListByEndpointDeprecated, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.v1MessageAttemptListByEndpointDeprecated, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling MessageAttemptApi.v1MessageAttemptListByEndpointDeprecated, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        if ($limit !== null && $limit > 250) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageAttemptApi.v1MessageAttemptListByEndpointDeprecated, must be smaller than or equal to 250.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageAttemptApi.v1MessageAttemptListByEndpointDeprecated, must be bigger than or equal to 1.');
        }
        

        if ($channel !== null && strlen($channel) > 128) {
            throw new \InvalidArgumentException('invalid length for "$channel" when calling MessageAttemptApi.v1MessageAttemptListByEndpointDeprecated, must be smaller than or equal to 128.');
        }
        if ($channel !== null && !preg_match("/^[a-zA-Z0-9\\-_.]+$/", $channel)) {
            throw new \InvalidArgumentException("invalid value for \"channel\" when calling MessageAttemptApi.v1MessageAttemptListByEndpointDeprecated, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        





        $resourcePath = '/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/attempt/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iterator,
            'iterator', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel,
            'channel', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'MessageStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before,
            'before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $event_types,
            'event_types', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($msg_id !== null) {
            $resourcePath = str_replace(
                '{' . 'msg_id' . '}',
                ObjectSerializer::toPathValue($msg_id),
                $resourcePath
            );
        }
        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MessageAttemptListByMsg
     *
     * List Attempts By Msg
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  StatusCodeClass $status_code_class Filter response based on the HTTP status code (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  string $endpoint_id Filter the attempts based on the attempted endpoint (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  bool $with_content When &#x60;true&#x60; attempt content is included in the response (optional, default to true)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListByMsg'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\ApiClient\Model\ListResponseMessageAttemptOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut
     */
    public function v1MessageAttemptListByMsg($app_id, $msg_id, $limit = null, $iterator = null, $status = null, $status_code_class = null, $channel = null, $endpoint_id = null, $before = null, $after = null, $with_content = true, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListByMsg'][0])
    {
        list($response) = $this->v1MessageAttemptListByMsgWithHttpInfo($app_id, $msg_id, $limit, $iterator, $status, $status_code_class, $channel, $endpoint_id, $before, $after, $with_content, $event_types, $contentType);
        return $response;
    }

    /**
     * Operation v1MessageAttemptListByMsgWithHttpInfo
     *
     * List Attempts By Msg
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  StatusCodeClass $status_code_class Filter response based on the HTTP status code (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  string $endpoint_id Filter the attempts based on the attempted endpoint (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  bool $with_content When &#x60;true&#x60; attempt content is included in the response (optional, default to true)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListByMsg'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\ApiClient\Model\ListResponseMessageAttemptOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MessageAttemptListByMsgWithHttpInfo($app_id, $msg_id, $limit = null, $iterator = null, $status = null, $status_code_class = null, $channel = null, $endpoint_id = null, $before = null, $after = null, $with_content = true, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListByMsg'][0])
    {
        $request = $this->v1MessageAttemptListByMsgRequest($app_id, $msg_id, $limit, $iterator, $status, $status_code_class, $channel, $endpoint_id, $before, $after, $with_content, $event_types, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Svix\ApiClient\Model\ListResponseMessageAttemptOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\ListResponseMessageAttemptOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\ListResponseMessageAttemptOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\ApiClient\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\ApiClient\Model\ListResponseMessageAttemptOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\ListResponseMessageAttemptOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MessageAttemptListByMsgAsync
     *
     * List Attempts By Msg
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  StatusCodeClass $status_code_class Filter response based on the HTTP status code (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  string $endpoint_id Filter the attempts based on the attempted endpoint (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  bool $with_content When &#x60;true&#x60; attempt content is included in the response (optional, default to true)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListByMsg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessageAttemptListByMsgAsync($app_id, $msg_id, $limit = null, $iterator = null, $status = null, $status_code_class = null, $channel = null, $endpoint_id = null, $before = null, $after = null, $with_content = true, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListByMsg'][0])
    {
        return $this->v1MessageAttemptListByMsgAsyncWithHttpInfo($app_id, $msg_id, $limit, $iterator, $status, $status_code_class, $channel, $endpoint_id, $before, $after, $with_content, $event_types, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MessageAttemptListByMsgAsyncWithHttpInfo
     *
     * List Attempts By Msg
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  StatusCodeClass $status_code_class Filter response based on the HTTP status code (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  string $endpoint_id Filter the attempts based on the attempted endpoint (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  bool $with_content When &#x60;true&#x60; attempt content is included in the response (optional, default to true)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListByMsg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessageAttemptListByMsgAsyncWithHttpInfo($app_id, $msg_id, $limit = null, $iterator = null, $status = null, $status_code_class = null, $channel = null, $endpoint_id = null, $before = null, $after = null, $with_content = true, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListByMsg'][0])
    {
        $returnType = '\Svix\ApiClient\Model\ListResponseMessageAttemptOut';
        $request = $this->v1MessageAttemptListByMsgRequest($app_id, $msg_id, $limit, $iterator, $status, $status_code_class, $channel, $endpoint_id, $before, $after, $with_content, $event_types, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MessageAttemptListByMsg'
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  StatusCodeClass $status_code_class Filter response based on the HTTP status code (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  string $endpoint_id Filter the attempts based on the attempted endpoint (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  bool $with_content When &#x60;true&#x60; attempt content is included in the response (optional, default to true)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListByMsg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MessageAttemptListByMsgRequest($app_id, $msg_id, $limit = null, $iterator = null, $status = null, $status_code_class = null, $channel = null, $endpoint_id = null, $before = null, $after = null, $with_content = true, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListByMsg'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling v1MessageAttemptListByMsg'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.v1MessageAttemptListByMsg, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.v1MessageAttemptListByMsg, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling MessageAttemptApi.v1MessageAttemptListByMsg, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'msg_id' is set
        if ($msg_id === null || (is_array($msg_id) && count($msg_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $msg_id when calling v1MessageAttemptListByMsg'
            );
        }
        if (strlen($msg_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.v1MessageAttemptListByMsg, must be smaller than or equal to 256.');
        }
        if (strlen($msg_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.v1MessageAttemptListByMsg, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $msg_id)) {
            throw new \InvalidArgumentException("invalid value for \"msg_id\" when calling MessageAttemptApi.v1MessageAttemptListByMsg, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        if ($limit !== null && $limit > 250) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageAttemptApi.v1MessageAttemptListByMsg, must be smaller than or equal to 250.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageAttemptApi.v1MessageAttemptListByMsg, must be bigger than or equal to 1.');
        }
        



        if ($channel !== null && strlen($channel) > 128) {
            throw new \InvalidArgumentException('invalid length for "$channel" when calling MessageAttemptApi.v1MessageAttemptListByMsg, must be smaller than or equal to 128.');
        }
        if ($channel !== null && !preg_match("/^[a-zA-Z0-9\\-_.]+$/", $channel)) {
            throw new \InvalidArgumentException("invalid value for \"channel\" when calling MessageAttemptApi.v1MessageAttemptListByMsg, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        if ($endpoint_id !== null && strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.v1MessageAttemptListByMsg, must be smaller than or equal to 256.');
        }
        if ($endpoint_id !== null && strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.v1MessageAttemptListByMsg, must be bigger than or equal to 1.');
        }
        if ($endpoint_id !== null && !preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling MessageAttemptApi.v1MessageAttemptListByMsg, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        





        $resourcePath = '/api/v1/app/{app_id}/attempt/msg/{msg_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iterator,
            'iterator', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'MessageStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status_code_class,
            'status_code_class', // param base name
            'StatusCodeClass', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel,
            'channel', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endpoint_id,
            'endpoint_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before,
            'before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_content,
            'with_content', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $event_types,
            'event_types', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($msg_id !== null) {
            $resourcePath = str_replace(
                '{' . 'msg_id' . '}',
                ObjectSerializer::toPathValue($msg_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MessageAttemptListByMsgDeprecated
     *
     * List Attempts
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  string $endpoint_id Filter the attempts based on the attempted endpoint (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  StatusCodeClass $status_code_class Filter response based on the HTTP status code (optional)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListByMsgDeprecated'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\ApiClient\Model\ListResponseMessageAttemptOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut
     * @deprecated
     */
    public function v1MessageAttemptListByMsgDeprecated($app_id, $msg_id, $limit = null, $iterator = null, $endpoint_id = null, $channel = null, $status = null, $before = null, $after = null, $status_code_class = null, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListByMsgDeprecated'][0])
    {
        list($response) = $this->v1MessageAttemptListByMsgDeprecatedWithHttpInfo($app_id, $msg_id, $limit, $iterator, $endpoint_id, $channel, $status, $before, $after, $status_code_class, $event_types, $contentType);
        return $response;
    }

    /**
     * Operation v1MessageAttemptListByMsgDeprecatedWithHttpInfo
     *
     * List Attempts
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  string $endpoint_id Filter the attempts based on the attempted endpoint (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  StatusCodeClass $status_code_class Filter response based on the HTTP status code (optional)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListByMsgDeprecated'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\ApiClient\Model\ListResponseMessageAttemptOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function v1MessageAttemptListByMsgDeprecatedWithHttpInfo($app_id, $msg_id, $limit = null, $iterator = null, $endpoint_id = null, $channel = null, $status = null, $before = null, $after = null, $status_code_class = null, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListByMsgDeprecated'][0])
    {
        $request = $this->v1MessageAttemptListByMsgDeprecatedRequest($app_id, $msg_id, $limit, $iterator, $endpoint_id, $channel, $status, $before, $after, $status_code_class, $event_types, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Svix\ApiClient\Model\ListResponseMessageAttemptOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\ListResponseMessageAttemptOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\ListResponseMessageAttemptOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\ApiClient\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\ApiClient\Model\ListResponseMessageAttemptOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\ListResponseMessageAttemptOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MessageAttemptListByMsgDeprecatedAsync
     *
     * List Attempts
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  string $endpoint_id Filter the attempts based on the attempted endpoint (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  StatusCodeClass $status_code_class Filter response based on the HTTP status code (optional)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListByMsgDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function v1MessageAttemptListByMsgDeprecatedAsync($app_id, $msg_id, $limit = null, $iterator = null, $endpoint_id = null, $channel = null, $status = null, $before = null, $after = null, $status_code_class = null, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListByMsgDeprecated'][0])
    {
        return $this->v1MessageAttemptListByMsgDeprecatedAsyncWithHttpInfo($app_id, $msg_id, $limit, $iterator, $endpoint_id, $channel, $status, $before, $after, $status_code_class, $event_types, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MessageAttemptListByMsgDeprecatedAsyncWithHttpInfo
     *
     * List Attempts
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  string $endpoint_id Filter the attempts based on the attempted endpoint (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  StatusCodeClass $status_code_class Filter response based on the HTTP status code (optional)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListByMsgDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function v1MessageAttemptListByMsgDeprecatedAsyncWithHttpInfo($app_id, $msg_id, $limit = null, $iterator = null, $endpoint_id = null, $channel = null, $status = null, $before = null, $after = null, $status_code_class = null, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListByMsgDeprecated'][0])
    {
        $returnType = '\Svix\ApiClient\Model\ListResponseMessageAttemptOut';
        $request = $this->v1MessageAttemptListByMsgDeprecatedRequest($app_id, $msg_id, $limit, $iterator, $endpoint_id, $channel, $status, $before, $after, $status_code_class, $event_types, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MessageAttemptListByMsgDeprecated'
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  string $endpoint_id Filter the attempts based on the attempted endpoint (optional)
     * @param  string $channel Filter response based on the channel (optional)
     * @param  MessageStatus $status Filter response based on the delivery status (optional)
     * @param  \DateTime $before Only include items created before a certain date (optional)
     * @param  \DateTime $after Only include items created after a certain date (optional)
     * @param  StatusCodeClass $status_code_class Filter response based on the HTTP status code (optional)
     * @param  string[] $event_types Filter response based on the event type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptListByMsgDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function v1MessageAttemptListByMsgDeprecatedRequest($app_id, $msg_id, $limit = null, $iterator = null, $endpoint_id = null, $channel = null, $status = null, $before = null, $after = null, $status_code_class = null, $event_types = null, string $contentType = self::contentTypes['v1MessageAttemptListByMsgDeprecated'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling v1MessageAttemptListByMsgDeprecated'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.v1MessageAttemptListByMsgDeprecated, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.v1MessageAttemptListByMsgDeprecated, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling MessageAttemptApi.v1MessageAttemptListByMsgDeprecated, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'msg_id' is set
        if ($msg_id === null || (is_array($msg_id) && count($msg_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $msg_id when calling v1MessageAttemptListByMsgDeprecated'
            );
        }
        if (strlen($msg_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.v1MessageAttemptListByMsgDeprecated, must be smaller than or equal to 256.');
        }
        if (strlen($msg_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.v1MessageAttemptListByMsgDeprecated, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $msg_id)) {
            throw new \InvalidArgumentException("invalid value for \"msg_id\" when calling MessageAttemptApi.v1MessageAttemptListByMsgDeprecated, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        if ($limit !== null && $limit > 250) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageAttemptApi.v1MessageAttemptListByMsgDeprecated, must be smaller than or equal to 250.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageAttemptApi.v1MessageAttemptListByMsgDeprecated, must be bigger than or equal to 1.');
        }
        

        if ($endpoint_id !== null && strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.v1MessageAttemptListByMsgDeprecated, must be smaller than or equal to 256.');
        }
        if ($endpoint_id !== null && strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.v1MessageAttemptListByMsgDeprecated, must be bigger than or equal to 1.');
        }
        if ($endpoint_id !== null && !preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling MessageAttemptApi.v1MessageAttemptListByMsgDeprecated, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        if ($channel !== null && strlen($channel) > 128) {
            throw new \InvalidArgumentException('invalid length for "$channel" when calling MessageAttemptApi.v1MessageAttemptListByMsgDeprecated, must be smaller than or equal to 128.');
        }
        if ($channel !== null && !preg_match("/^[a-zA-Z0-9\\-_.]+$/", $channel)) {
            throw new \InvalidArgumentException("invalid value for \"channel\" when calling MessageAttemptApi.v1MessageAttemptListByMsgDeprecated, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        






        $resourcePath = '/api/v1/app/{app_id}/msg/{msg_id}/attempt/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iterator,
            'iterator', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endpoint_id,
            'endpoint_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel,
            'channel', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'MessageStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before,
            'before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status_code_class,
            'status_code_class', // param base name
            'StatusCodeClass', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $event_types,
            'event_types', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($msg_id !== null) {
            $resourcePath = str_replace(
                '{' . 'msg_id' . '}',
                ObjectSerializer::toPathValue($msg_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MessageAttemptResend
     *
     * Resend Webhook
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  string $endpoint_id The ep&#39;s ID or UID (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptResend'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1MessageAttemptResend($app_id, $msg_id, $endpoint_id, $idempotency_key = null, string $contentType = self::contentTypes['v1MessageAttemptResend'][0])
    {
        $this->v1MessageAttemptResendWithHttpInfo($app_id, $msg_id, $endpoint_id, $idempotency_key, $contentType);
    }

    /**
     * Operation v1MessageAttemptResendWithHttpInfo
     *
     * Resend Webhook
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  string $endpoint_id The ep&#39;s ID or UID (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptResend'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MessageAttemptResendWithHttpInfo($app_id, $msg_id, $endpoint_id, $idempotency_key = null, string $contentType = self::contentTypes['v1MessageAttemptResend'][0])
    {
        $request = $this->v1MessageAttemptResendRequest($app_id, $msg_id, $endpoint_id, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MessageAttemptResendAsync
     *
     * Resend Webhook
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  string $endpoint_id The ep&#39;s ID or UID (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptResend'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessageAttemptResendAsync($app_id, $msg_id, $endpoint_id, $idempotency_key = null, string $contentType = self::contentTypes['v1MessageAttemptResend'][0])
    {
        return $this->v1MessageAttemptResendAsyncWithHttpInfo($app_id, $msg_id, $endpoint_id, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MessageAttemptResendAsyncWithHttpInfo
     *
     * Resend Webhook
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  string $endpoint_id The ep&#39;s ID or UID (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptResend'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessageAttemptResendAsyncWithHttpInfo($app_id, $msg_id, $endpoint_id, $idempotency_key = null, string $contentType = self::contentTypes['v1MessageAttemptResend'][0])
    {
        $returnType = '';
        $request = $this->v1MessageAttemptResendRequest($app_id, $msg_id, $endpoint_id, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MessageAttemptResend'
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $msg_id The msg&#39;s ID or UID (required)
     * @param  string $endpoint_id The ep&#39;s ID or UID (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessageAttemptResend'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MessageAttemptResendRequest($app_id, $msg_id, $endpoint_id, $idempotency_key = null, string $contentType = self::contentTypes['v1MessageAttemptResend'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling v1MessageAttemptResend'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.v1MessageAttemptResend, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.v1MessageAttemptResend, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling MessageAttemptApi.v1MessageAttemptResend, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'msg_id' is set
        if ($msg_id === null || (is_array($msg_id) && count($msg_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $msg_id when calling v1MessageAttemptResend'
            );
        }
        if (strlen($msg_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.v1MessageAttemptResend, must be smaller than or equal to 256.');
        }
        if (strlen($msg_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.v1MessageAttemptResend, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $msg_id)) {
            throw new \InvalidArgumentException("invalid value for \"msg_id\" when calling MessageAttemptApi.v1MessageAttemptResend, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling v1MessageAttemptResend'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.v1MessageAttemptResend, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.v1MessageAttemptResend, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling MessageAttemptApi.v1MessageAttemptResend, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        


        $resourcePath = '/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($msg_id !== null) {
            $resourcePath = str_replace(
                '{' . 'msg_id' . '}',
                ObjectSerializer::toPathValue($msg_id),
                $resourcePath
            );
        }
        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
