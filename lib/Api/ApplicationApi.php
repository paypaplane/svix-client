<?php
/**
 * ApplicationApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Svix\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Svix API
 *
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`. For more information on authentication, please refer to the [authentication token docs](https://docs.svix.com/api-keys).  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.
 *
 * The version of the OpenAPI document: 1.13.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Svix\ApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Svix\ApiClient\ApiException;
use Svix\ApiClient\Configuration;
use Svix\ApiClient\HeaderSelector;
use Svix\ApiClient\ObjectSerializer;

/**
 * ApplicationApi Class Doc Comment
 *
 * @category Class
 * @package  Svix\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ApplicationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'v1ApplicationCreate' => [
            'application/json',
        ],
        'v1ApplicationDelete' => [
            'application/json',
        ],
        'v1ApplicationGet' => [
            'application/json',
        ],
        'v1ApplicationList' => [
            'application/json',
        ],
        'v1ApplicationPatch' => [
            'application/json',
        ],
        'v1ApplicationUpdate' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1ApplicationCreate
     *
     * Create Application
     *
     * @param  \Svix\ApiClient\Model\ApplicationIn $application_in application_in (required)
     * @param  bool $get_if_exists Get an existing application, or create a new one if doesn&#39;t exist. It&#39;s two separate functions in the libs. (optional, default to false)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationCreate'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\ApiClient\Model\ApplicationOut|\Svix\ApiClient\Model\ApplicationOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut
     */
    public function v1ApplicationCreate($application_in, $get_if_exists = false, $idempotency_key = null, string $contentType = self::contentTypes['v1ApplicationCreate'][0])
    {
        list($response) = $this->v1ApplicationCreateWithHttpInfo($application_in, $get_if_exists, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation v1ApplicationCreateWithHttpInfo
     *
     * Create Application
     *
     * @param  \Svix\ApiClient\Model\ApplicationIn $application_in (required)
     * @param  bool $get_if_exists Get an existing application, or create a new one if doesn&#39;t exist. It&#39;s two separate functions in the libs. (optional, default to false)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationCreate'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\ApiClient\Model\ApplicationOut|\Svix\ApiClient\Model\ApplicationOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApplicationCreateWithHttpInfo($application_in, $get_if_exists = false, $idempotency_key = null, string $contentType = self::contentTypes['v1ApplicationCreate'][0])
    {
        $request = $this->v1ApplicationCreateRequest($application_in, $get_if_exists, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Svix\ApiClient\Model\ApplicationOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\ApplicationOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\ApplicationOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\Svix\ApiClient\Model\ApplicationOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\ApplicationOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\ApplicationOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\ApiClient\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\ApiClient\Model\ApplicationOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\ApplicationOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\ApplicationOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1ApplicationCreateAsync
     *
     * Create Application
     *
     * @param  \Svix\ApiClient\Model\ApplicationIn $application_in (required)
     * @param  bool $get_if_exists Get an existing application, or create a new one if doesn&#39;t exist. It&#39;s two separate functions in the libs. (optional, default to false)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApplicationCreateAsync($application_in, $get_if_exists = false, $idempotency_key = null, string $contentType = self::contentTypes['v1ApplicationCreate'][0])
    {
        return $this->v1ApplicationCreateAsyncWithHttpInfo($application_in, $get_if_exists, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApplicationCreateAsyncWithHttpInfo
     *
     * Create Application
     *
     * @param  \Svix\ApiClient\Model\ApplicationIn $application_in (required)
     * @param  bool $get_if_exists Get an existing application, or create a new one if doesn&#39;t exist. It&#39;s two separate functions in the libs. (optional, default to false)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApplicationCreateAsyncWithHttpInfo($application_in, $get_if_exists = false, $idempotency_key = null, string $contentType = self::contentTypes['v1ApplicationCreate'][0])
    {
        $returnType = '\Svix\ApiClient\Model\ApplicationOut';
        $request = $this->v1ApplicationCreateRequest($application_in, $get_if_exists, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApplicationCreate'
     *
     * @param  \Svix\ApiClient\Model\ApplicationIn $application_in (required)
     * @param  bool $get_if_exists Get an existing application, or create a new one if doesn&#39;t exist. It&#39;s two separate functions in the libs. (optional, default to false)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ApplicationCreateRequest($application_in, $get_if_exists = false, $idempotency_key = null, string $contentType = self::contentTypes['v1ApplicationCreate'][0])
    {

        // verify the required parameter 'application_in' is set
        if ($application_in === null || (is_array($application_in) && count($application_in) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_in when calling v1ApplicationCreate'
            );
        }




        $resourcePath = '/api/v1/app/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $get_if_exists,
            'get_if_exists', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($application_in)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($application_in));
            } else {
                $httpBody = $application_in;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApplicationDelete
     *
     * Delete Application
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationDelete'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1ApplicationDelete($app_id, string $contentType = self::contentTypes['v1ApplicationDelete'][0])
    {
        $this->v1ApplicationDeleteWithHttpInfo($app_id, $contentType);
    }

    /**
     * Operation v1ApplicationDeleteWithHttpInfo
     *
     * Delete Application
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationDelete'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApplicationDeleteWithHttpInfo($app_id, string $contentType = self::contentTypes['v1ApplicationDelete'][0])
    {
        $request = $this->v1ApplicationDeleteRequest($app_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1ApplicationDeleteAsync
     *
     * Delete Application
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApplicationDeleteAsync($app_id, string $contentType = self::contentTypes['v1ApplicationDelete'][0])
    {
        return $this->v1ApplicationDeleteAsyncWithHttpInfo($app_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApplicationDeleteAsyncWithHttpInfo
     *
     * Delete Application
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApplicationDeleteAsyncWithHttpInfo($app_id, string $contentType = self::contentTypes['v1ApplicationDelete'][0])
    {
        $returnType = '';
        $request = $this->v1ApplicationDeleteRequest($app_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApplicationDelete'
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ApplicationDeleteRequest($app_id, string $contentType = self::contentTypes['v1ApplicationDelete'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling v1ApplicationDelete'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling ApplicationApi.v1ApplicationDelete, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling ApplicationApi.v1ApplicationDelete, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling ApplicationApi.v1ApplicationDelete, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        

        $resourcePath = '/api/v1/app/{app_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApplicationGet
     *
     * Get Application
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationGet'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\ApiClient\Model\ApplicationOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut
     */
    public function v1ApplicationGet($app_id, string $contentType = self::contentTypes['v1ApplicationGet'][0])
    {
        list($response) = $this->v1ApplicationGetWithHttpInfo($app_id, $contentType);
        return $response;
    }

    /**
     * Operation v1ApplicationGetWithHttpInfo
     *
     * Get Application
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationGet'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\ApiClient\Model\ApplicationOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApplicationGetWithHttpInfo($app_id, string $contentType = self::contentTypes['v1ApplicationGet'][0])
    {
        $request = $this->v1ApplicationGetRequest($app_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Svix\ApiClient\Model\ApplicationOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\ApplicationOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\ApplicationOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\ApiClient\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\ApiClient\Model\ApplicationOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\ApplicationOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1ApplicationGetAsync
     *
     * Get Application
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApplicationGetAsync($app_id, string $contentType = self::contentTypes['v1ApplicationGet'][0])
    {
        return $this->v1ApplicationGetAsyncWithHttpInfo($app_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApplicationGetAsyncWithHttpInfo
     *
     * Get Application
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApplicationGetAsyncWithHttpInfo($app_id, string $contentType = self::contentTypes['v1ApplicationGet'][0])
    {
        $returnType = '\Svix\ApiClient\Model\ApplicationOut';
        $request = $this->v1ApplicationGetRequest($app_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApplicationGet'
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ApplicationGetRequest($app_id, string $contentType = self::contentTypes['v1ApplicationGet'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling v1ApplicationGet'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling ApplicationApi.v1ApplicationGet, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling ApplicationApi.v1ApplicationGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling ApplicationApi.v1ApplicationGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        

        $resourcePath = '/api/v1/app/{app_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApplicationList
     *
     * List Applications
     *
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  Ordering $order The sorting order of the returned items (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationList'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\ApiClient\Model\ListResponseApplicationOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut
     */
    public function v1ApplicationList($limit = null, $iterator = null, $order = null, string $contentType = self::contentTypes['v1ApplicationList'][0])
    {
        list($response) = $this->v1ApplicationListWithHttpInfo($limit, $iterator, $order, $contentType);
        return $response;
    }

    /**
     * Operation v1ApplicationListWithHttpInfo
     *
     * List Applications
     *
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  Ordering $order The sorting order of the returned items (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationList'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\ApiClient\Model\ListResponseApplicationOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApplicationListWithHttpInfo($limit = null, $iterator = null, $order = null, string $contentType = self::contentTypes['v1ApplicationList'][0])
    {
        $request = $this->v1ApplicationListRequest($limit, $iterator, $order, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Svix\ApiClient\Model\ListResponseApplicationOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\ListResponseApplicationOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\ListResponseApplicationOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\ApiClient\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\ApiClient\Model\ListResponseApplicationOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\ListResponseApplicationOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1ApplicationListAsync
     *
     * List Applications
     *
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  Ordering $order The sorting order of the returned items (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApplicationListAsync($limit = null, $iterator = null, $order = null, string $contentType = self::contentTypes['v1ApplicationList'][0])
    {
        return $this->v1ApplicationListAsyncWithHttpInfo($limit, $iterator, $order, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApplicationListAsyncWithHttpInfo
     *
     * List Applications
     *
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  Ordering $order The sorting order of the returned items (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApplicationListAsyncWithHttpInfo($limit = null, $iterator = null, $order = null, string $contentType = self::contentTypes['v1ApplicationList'][0])
    {
        $returnType = '\Svix\ApiClient\Model\ListResponseApplicationOut';
        $request = $this->v1ApplicationListRequest($limit, $iterator, $order, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApplicationList'
     *
     * @param  int $limit Limit the number of returned items (optional)
     * @param  string $iterator The iterator returned from a prior invocation (optional)
     * @param  Ordering $order The sorting order of the returned items (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ApplicationListRequest($limit = null, $iterator = null, $order = null, string $contentType = self::contentTypes['v1ApplicationList'][0])
    {

        if ($limit !== null && $limit > 250) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ApplicationApi.v1ApplicationList, must be smaller than or equal to 250.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ApplicationApi.v1ApplicationList, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/api/v1/app/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iterator,
            'iterator', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'Ordering', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApplicationPatch
     *
     * Patch Application
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  \Svix\ApiClient\Model\ApplicationPatch $application_patch application_patch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationPatch'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\ApiClient\Model\ApplicationOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut
     */
    public function v1ApplicationPatch($app_id, $application_patch, string $contentType = self::contentTypes['v1ApplicationPatch'][0])
    {
        list($response) = $this->v1ApplicationPatchWithHttpInfo($app_id, $application_patch, $contentType);
        return $response;
    }

    /**
     * Operation v1ApplicationPatchWithHttpInfo
     *
     * Patch Application
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  \Svix\ApiClient\Model\ApplicationPatch $application_patch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationPatch'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\ApiClient\Model\ApplicationOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApplicationPatchWithHttpInfo($app_id, $application_patch, string $contentType = self::contentTypes['v1ApplicationPatch'][0])
    {
        $request = $this->v1ApplicationPatchRequest($app_id, $application_patch, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Svix\ApiClient\Model\ApplicationOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\ApplicationOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\ApplicationOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\ApiClient\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\ApiClient\Model\ApplicationOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\ApplicationOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1ApplicationPatchAsync
     *
     * Patch Application
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  \Svix\ApiClient\Model\ApplicationPatch $application_patch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApplicationPatchAsync($app_id, $application_patch, string $contentType = self::contentTypes['v1ApplicationPatch'][0])
    {
        return $this->v1ApplicationPatchAsyncWithHttpInfo($app_id, $application_patch, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApplicationPatchAsyncWithHttpInfo
     *
     * Patch Application
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  \Svix\ApiClient\Model\ApplicationPatch $application_patch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApplicationPatchAsyncWithHttpInfo($app_id, $application_patch, string $contentType = self::contentTypes['v1ApplicationPatch'][0])
    {
        $returnType = '\Svix\ApiClient\Model\ApplicationOut';
        $request = $this->v1ApplicationPatchRequest($app_id, $application_patch, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApplicationPatch'
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  \Svix\ApiClient\Model\ApplicationPatch $application_patch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ApplicationPatchRequest($app_id, $application_patch, string $contentType = self::contentTypes['v1ApplicationPatch'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling v1ApplicationPatch'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling ApplicationApi.v1ApplicationPatch, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling ApplicationApi.v1ApplicationPatch, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling ApplicationApi.v1ApplicationPatch, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'application_patch' is set
        if ($application_patch === null || (is_array($application_patch) && count($application_patch) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_patch when calling v1ApplicationPatch'
            );
        }


        $resourcePath = '/api/v1/app/{app_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($application_patch)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($application_patch));
            } else {
                $httpBody = $application_patch;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApplicationUpdate
     *
     * Update Application
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  \Svix\ApiClient\Model\ApplicationIn $application_in application_in (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationUpdate'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\ApiClient\Model\ApplicationOut|\Svix\ApiClient\Model\ApplicationOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut
     */
    public function v1ApplicationUpdate($app_id, $application_in, string $contentType = self::contentTypes['v1ApplicationUpdate'][0])
    {
        list($response) = $this->v1ApplicationUpdateWithHttpInfo($app_id, $application_in, $contentType);
        return $response;
    }

    /**
     * Operation v1ApplicationUpdateWithHttpInfo
     *
     * Update Application
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  \Svix\ApiClient\Model\ApplicationIn $application_in (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationUpdate'] to see the possible values for this operation
     *
     * @throws \Svix\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\ApiClient\Model\ApplicationOut|\Svix\ApiClient\Model\ApplicationOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HttpErrorOut|\Svix\ApiClient\Model\HTTPValidationError|\Svix\ApiClient\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApplicationUpdateWithHttpInfo($app_id, $application_in, string $contentType = self::contentTypes['v1ApplicationUpdate'][0])
    {
        $request = $this->v1ApplicationUpdateRequest($app_id, $application_in, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Svix\ApiClient\Model\ApplicationOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\ApplicationOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\ApplicationOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\Svix\ApiClient\Model\ApplicationOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\ApplicationOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\ApplicationOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\ApiClient\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Svix\ApiClient\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Svix\ApiClient\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\ApiClient\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\ApiClient\Model\ApplicationOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\ApplicationOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\ApplicationOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\ApiClient\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1ApplicationUpdateAsync
     *
     * Update Application
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  \Svix\ApiClient\Model\ApplicationIn $application_in (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApplicationUpdateAsync($app_id, $application_in, string $contentType = self::contentTypes['v1ApplicationUpdate'][0])
    {
        return $this->v1ApplicationUpdateAsyncWithHttpInfo($app_id, $application_in, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApplicationUpdateAsyncWithHttpInfo
     *
     * Update Application
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  \Svix\ApiClient\Model\ApplicationIn $application_in (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApplicationUpdateAsyncWithHttpInfo($app_id, $application_in, string $contentType = self::contentTypes['v1ApplicationUpdate'][0])
    {
        $returnType = '\Svix\ApiClient\Model\ApplicationOut';
        $request = $this->v1ApplicationUpdateRequest($app_id, $application_in, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApplicationUpdate'
     *
     * @param  string $app_id The app&#39;s ID or UID (required)
     * @param  \Svix\ApiClient\Model\ApplicationIn $application_in (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApplicationUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ApplicationUpdateRequest($app_id, $application_in, string $contentType = self::contentTypes['v1ApplicationUpdate'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling v1ApplicationUpdate'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling ApplicationApi.v1ApplicationUpdate, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling ApplicationApi.v1ApplicationUpdate, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling ApplicationApi.v1ApplicationUpdate, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'application_in' is set
        if ($application_in === null || (is_array($application_in) && count($application_in) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_in when calling v1ApplicationUpdate'
            );
        }


        $resourcePath = '/api/v1/app/{app_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($application_in)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($application_in));
            } else {
                $httpBody = $application_in;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
