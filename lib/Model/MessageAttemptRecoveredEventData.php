<?php
/**
 * MessageAttemptRecoveredEventData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Svix\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Svix API
 *
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`. For more information on authentication, please refer to the [authentication token docs](https://docs.svix.com/api-keys).  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.
 *
 * The version of the OpenAPI document: 1.13.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Svix\ApiClient\Model;

use \ArrayAccess;
use \Svix\ApiClient\ObjectSerializer;

/**
 * MessageAttemptRecoveredEventData Class Doc Comment
 *
 * @category Class
 * @description Sent when a message delivery has failed (all of the retry attempts have been exhausted) as a \&quot;message.attempt.exhausted\&quot; type or after it&#39;s failed four times as a \&quot;message.attempt.failing\&quot; event.
 * @package  Svix\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MessageAttemptRecoveredEventData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MessageAttemptRecoveredEventData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'app_id' => 'string',
        'app_uid' => 'string',
        'msg_id' => 'string',
        'msg_event_id' => 'string',
        'endpoint_id' => 'string',
        'last_attempt' => '\Svix\ApiClient\Model\MessageAttemptFailedData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'app_id' => null,
        'app_uid' => null,
        'msg_id' => null,
        'msg_event_id' => null,
        'endpoint_id' => null,
        'last_attempt' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'app_id' => false,
		'app_uid' => false,
		'msg_id' => false,
		'msg_event_id' => false,
		'endpoint_id' => false,
		'last_attempt' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_id' => 'appId',
        'app_uid' => 'appUid',
        'msg_id' => 'msgId',
        'msg_event_id' => 'msgEventId',
        'endpoint_id' => 'endpointId',
        'last_attempt' => 'lastAttempt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_id' => 'setAppId',
        'app_uid' => 'setAppUid',
        'msg_id' => 'setMsgId',
        'msg_event_id' => 'setMsgEventId',
        'endpoint_id' => 'setEndpointId',
        'last_attempt' => 'setLastAttempt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_id' => 'getAppId',
        'app_uid' => 'getAppUid',
        'msg_id' => 'getMsgId',
        'msg_event_id' => 'getMsgEventId',
        'endpoint_id' => 'getEndpointId',
        'last_attempt' => 'getLastAttempt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('app_id', $data ?? [], null);
        $this->setIfExists('app_uid', $data ?? [], null);
        $this->setIfExists('msg_id', $data ?? [], null);
        $this->setIfExists('msg_event_id', $data ?? [], null);
        $this->setIfExists('endpoint_id', $data ?? [], null);
        $this->setIfExists('last_attempt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['app_id'] === null) {
            $invalidProperties[] = "'app_id' can't be null";
        }
        if (!is_null($this->container['app_uid']) && (mb_strlen($this->container['app_uid']) > 256)) {
            $invalidProperties[] = "invalid value for 'app_uid', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['app_uid']) && (mb_strlen($this->container['app_uid']) < 1)) {
            $invalidProperties[] = "invalid value for 'app_uid', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['app_uid']) && !preg_match("/^[a-zA-Z0-9\\-_.]+$/", $this->container['app_uid'])) {
            $invalidProperties[] = "invalid value for 'app_uid', must be conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.";
        }

        if ($this->container['msg_id'] === null) {
            $invalidProperties[] = "'msg_id' can't be null";
        }
        if (!is_null($this->container['msg_event_id']) && (mb_strlen($this->container['msg_event_id']) > 256)) {
            $invalidProperties[] = "invalid value for 'msg_event_id', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['msg_event_id']) && (mb_strlen($this->container['msg_event_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'msg_event_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['msg_event_id']) && !preg_match("/^[a-zA-Z0-9\\-_.]+$/", $this->container['msg_event_id'])) {
            $invalidProperties[] = "invalid value for 'msg_event_id', must be conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.";
        }

        if ($this->container['endpoint_id'] === null) {
            $invalidProperties[] = "'endpoint_id' can't be null";
        }
        if ($this->container['last_attempt'] === null) {
            $invalidProperties[] = "'last_attempt' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_id
     *
     * @return string
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param string $app_id The app's ID
     *
     * @return self
     */
    public function setAppId($app_id)
    {
        if (is_null($app_id)) {
            throw new \InvalidArgumentException('non-nullable app_id cannot be null');
        }
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets app_uid
     *
     * @return string|null
     */
    public function getAppUid()
    {
        return $this->container['app_uid'];
    }

    /**
     * Sets app_uid
     *
     * @param string|null $app_uid The app's UID
     *
     * @return self
     */
    public function setAppUid($app_uid)
    {
        if (is_null($app_uid)) {
            throw new \InvalidArgumentException('non-nullable app_uid cannot be null');
        }
        if ((mb_strlen($app_uid) > 256)) {
            throw new \InvalidArgumentException('invalid length for $app_uid when calling MessageAttemptRecoveredEventData., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($app_uid) < 1)) {
            throw new \InvalidArgumentException('invalid length for $app_uid when calling MessageAttemptRecoveredEventData., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9\\-_.]+$/", ObjectSerializer::toString($app_uid)))) {
            throw new \InvalidArgumentException("invalid value for \$app_uid when calling MessageAttemptRecoveredEventData., must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }

        $this->container['app_uid'] = $app_uid;

        return $this;
    }

    /**
     * Gets msg_id
     *
     * @return string
     */
    public function getMsgId()
    {
        return $this->container['msg_id'];
    }

    /**
     * Sets msg_id
     *
     * @param string $msg_id The msg's ID
     *
     * @return self
     */
    public function setMsgId($msg_id)
    {
        if (is_null($msg_id)) {
            throw new \InvalidArgumentException('non-nullable msg_id cannot be null');
        }
        $this->container['msg_id'] = $msg_id;

        return $this;
    }

    /**
     * Gets msg_event_id
     *
     * @return string|null
     */
    public function getMsgEventId()
    {
        return $this->container['msg_event_id'];
    }

    /**
     * Sets msg_event_id
     *
     * @param string|null $msg_event_id The msg's UID
     *
     * @return self
     */
    public function setMsgEventId($msg_event_id)
    {
        if (is_null($msg_event_id)) {
            throw new \InvalidArgumentException('non-nullable msg_event_id cannot be null');
        }
        if ((mb_strlen($msg_event_id) > 256)) {
            throw new \InvalidArgumentException('invalid length for $msg_event_id when calling MessageAttemptRecoveredEventData., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($msg_event_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $msg_event_id when calling MessageAttemptRecoveredEventData., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9\\-_.]+$/", ObjectSerializer::toString($msg_event_id)))) {
            throw new \InvalidArgumentException("invalid value for \$msg_event_id when calling MessageAttemptRecoveredEventData., must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }

        $this->container['msg_event_id'] = $msg_event_id;

        return $this;
    }

    /**
     * Gets endpoint_id
     *
     * @return string
     */
    public function getEndpointId()
    {
        return $this->container['endpoint_id'];
    }

    /**
     * Sets endpoint_id
     *
     * @param string $endpoint_id The ep's ID
     *
     * @return self
     */
    public function setEndpointId($endpoint_id)
    {
        if (is_null($endpoint_id)) {
            throw new \InvalidArgumentException('non-nullable endpoint_id cannot be null');
        }
        $this->container['endpoint_id'] = $endpoint_id;

        return $this;
    }

    /**
     * Gets last_attempt
     *
     * @return \Svix\ApiClient\Model\MessageAttemptFailedData
     */
    public function getLastAttempt()
    {
        return $this->container['last_attempt'];
    }

    /**
     * Sets last_attempt
     *
     * @param \Svix\ApiClient\Model\MessageAttemptFailedData $last_attempt last_attempt
     *
     * @return self
     */
    public function setLastAttempt($last_attempt)
    {
        if (is_null($last_attempt)) {
            throw new \InvalidArgumentException('non-nullable last_attempt cannot be null');
        }
        $this->container['last_attempt'] = $last_attempt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


